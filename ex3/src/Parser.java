
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import exceptions.*;
import java_cup.runtime.*;
import callgraph.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\021\012\000\002\002\004\000\002\023" +
    "\006\000\002\024\002\000\002\024\007\000\002\026\005" +
    "\000\002\030\002\000\002\030\004\000\002\030\005\000" +
    "\002\030\004\000\002\031\007\000\002\031\010\000\002" +
    "\031\005\000\002\031\006\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\036\006\000\002\034\006\000\002\033\002\000" +
    "\002\033\005\000\002\035\002\000\002\035\005\000\002" +
    "\032\003\000\002\032\005\000\002\027\006\000\002\025" +
    "\002\000\002\025\004\000\002\013\003\000\002\013\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\002\000\002" +
    "\011\004\000\002\042\002\000\002\042\005\000\002\037" +
    "\002\000\002\037\003\000\002\037\005\000\002\041\003" +
    "\000\002\041\004\000\002\050\004\000\002\050\003\000" +
    "\002\050\004\000\002\050\003\000\002\050\004\000\002" +
    "\050\003\000\002\050\004\000\002\050\003\000\002\050" +
    "\004\000\002\050\003\000\002\050\004\000\002\050\003" +
    "\000\002\044\004\000\002\044\005\000\002\044\005\000" +
    "\002\045\003\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\003\000\002\045" +
    "\003\000\002\046\002\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\047\004\000" +
    "\002\047\003\000\002\047\005\000\002\047\005\000\002" +
    "\047\004\000\002\047\004\000\002\047\004\000\002\043" +
    "\005\000\002\043\006\000\002\043\002\000\002\002\002" +
    "\000\002\002\004\000\002\005\007\000\002\005\002\000" +
    "\002\003\002\000\002\003\004\000\002\006\007\000\002" +
    "\006\002\000\002\004\004\000\002\004\002\000\002\007" +
    "\007\000\002\007\002\000\002\022\004\000\002\022\002" +
    "\000\002\010\005\000\002\010\006\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\006\000\002\010\003\000\002\016" +
    "\011\000\002\017\002\000\002\017\007\000\002\020\002" +
    "\000\002\020\004\000\002\015\007\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\005\004\001\002\000\004\062\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\045\010\001\002\000\016\004\uffae\006\uffae\007" +
    "\uffae\010\011\011\uffae\012\uffae\001\002\000\016\004\uffab" +
    "\006\uffab\007\uffab\011\uffab\012\uffab\062\uffab\001\002\000" +
    "\014\004\uffaa\006\uffaa\007\uffaa\011\201\012\uffaa\001\002" +
    "\000\006\006\014\007\uffa1\001\002\000\022\007\uffdc\016" +
    "\022\020\025\045\uffdc\057\021\060\027\061\024\062\030" +
    "\001\002\000\004\007\016\001\002\000\004\062\017\001" +
    "\002\000\004\046\020\001\002\000\004\002\001\001\002" +
    "\000\006\052\171\062\172\001\002\000\022\040\050\041" +
    "\043\042\056\052\044\055\047\056\051\062\055\063\045" +
    "\001\002\000\012\007\uffe1\022\uffe1\023\uffe1\045\uffe1\001" +
    "\002\000\012\007\uff98\022\uff98\023\uff98\045\uff98\001\002" +
    "\000\022\040\050\041\043\042\056\052\044\055\047\056" +
    "\051\062\055\063\045\001\002\000\012\007\uffe3\022\uffe3" +
    "\023\uffe3\045\uffe3\001\002\000\006\052\142\062\143\001" +
    "\002\000\022\007\uffda\022\uffda\023\uffda\032\uffaf\045\uffda" +
    "\046\uffaf\050\uffaf\052\041\001\002\000\012\007\uffe0\022" +
    "\uffe0\023\uffe0\045\uffe0\001\002\000\012\007\uffdd\022\uffdd" +
    "\023\uffdd\045\uffdd\001\002\000\012\007\uffde\022\uffde\023" +
    "\uffde\045\uffde\001\002\000\012\007\uffdf\022\uffdf\023\uffdf" +
    "\045\uffdf\001\002\000\006\007\uffa2\045\036\001\002\000" +
    "\026\007\uffdc\016\022\020\025\022\uffdc\023\uffdc\045\uffdc" +
    "\057\021\060\027\061\024\062\030\001\002\000\012\007" +
    "\uffe2\022\uffe2\023\uffe2\045\uffe2\001\002\000\010\032\140" +
    "\046\066\050\067\001\002\000\026\040\050\041\043\042" +
    "\056\047\uffd8\052\044\053\uffd8\055\047\056\051\062\055" +
    "\063\045\001\002\000\012\007\uffdb\022\uffdb\023\uffdb\045" +
    "\uffdb\001\002\000\016\042\056\052\044\055\047\056\051" +
    "\062\055\063\045\001\002\000\022\040\050\041\043\042" +
    "\056\052\044\055\047\056\051\062\055\063\045\001\002" +
    "\000\062\007\uffb7\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\047\uffb7\051\uffb7\053\uffb7\063\132\001\002" +
    "\000\060\007\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\026\114\027\111\030\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\115\044" +
    "\112\045\uffbd\047\uffbd\051\uffbd\053\uffbd\001\002\000\060" +
    "\007\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\047\uffbf\051\uffbf\053\uffbf\001\002\000\016\042\056" +
    "\052\044\055\047\056\051\062\055\063\045\001\002\000" +
    "\060\007\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\047\uffbe\051\uffbe\053\uffbe\001\002\000\006\047" +
    "\uffd7\053\uffd7\001\002\000\042\007\uffd5\015\uffd5\017\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\031\076\033\100\034\101\035" +
    "\077\036\073\037\074\045\uffd5\047\uffd5\051\uffd5\053\uffd5" +
    "\001\002\000\060\007\uffc4\015\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\051\uffc4\053\uffc4\001\002" +
    "\000\066\007\uffaf\015\uffaf\017\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf" +
    "\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf" +
    "\062\065\001\002\000\012\042\056\052\044\062\055\063" +
    "\045\001\002\000\006\047\060\053\061\001\002\000\022" +
    "\040\050\041\043\042\056\052\044\055\047\056\051\062" +
    "\055\063\045\001\002\000\012\007\uffd9\022\uffd9\023\uffd9" +
    "\045\uffd9\001\002\000\006\047\uffd6\053\uffd6\001\002\000" +
    "\060\007\uffb4\015\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\047\uffb4\051\uffb4\053\uffb4\001\002\000\064\007" +
    "\uffb8\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\066\047\uffb8\050\067\051\uffb8\053\uffb8\001\002\000" +
    "\060\007\uffb2\015\uffb2\017\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\047\uffb2\051\uffb2\053\uffb2\001\002\000\004\062" +
    "\072\001\002\000\022\040\050\041\043\042\056\052\044" +
    "\055\047\056\051\062\055\063\045\001\002\000\004\051" +
    "\071\001\002\000\066\007\uffb0\015\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\001\002\000\066\007\uffb1\015\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\023\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\001\002\000\046" +
    "\007\uffca\015\uffca\017\uffca\021\uffca\022\uffca\023\uffca\040" +
    "\050\041\043\042\056\045\uffca\047\uffca\051\uffca\052\044" +
    "\053\uffca\055\047\056\051\062\055\063\045\001\002\000" +
    "\046\007\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\040\050\041\043\042\056\045\uffc8\047\uffc8\051\uffc8\052" +
    "\044\053\uffc8\055\047\056\051\062\055\063\045\001\002" +
    "\000\026\007\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\045\uffd4\047\uffd4\051\uffd4\053\uffd4\001\002\000\046" +
    "\007\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\040" +
    "\050\041\043\042\056\045\uffd2\047\uffd2\051\uffd2\052\044" +
    "\053\uffd2\055\047\056\051\062\055\063\045\001\002\000" +
    "\046\007\uffcc\015\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\040\050\041\043\042\056\045\uffcc\047\uffcc\051\uffcc\052" +
    "\044\053\uffcc\055\047\056\051\062\055\063\045\001\002" +
    "\000\046\007\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\040\050\041\043\042\056\045\uffd0\047\uffd0\051\uffd0" +
    "\052\044\053\uffd0\055\047\056\051\062\055\063\045\001" +
    "\002\000\046\007\uffce\015\uffce\017\uffce\021\uffce\022\uffce" +
    "\023\uffce\040\050\041\043\042\056\045\uffce\047\uffce\051" +
    "\uffce\052\044\053\uffce\055\047\056\051\062\055\063\045" +
    "\001\002\000\026\007\uffcf\015\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\045\uffcf\047\uffcf\051\uffcf\053\uffcf\001\002" +
    "\000\026\007\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\045\uffd1\047\uffd1\051\uffd1\053\uffd1\001\002\000\026" +
    "\007\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\045" +
    "\uffcd\047\uffcd\051\uffcd\053\uffcd\001\002\000\026\007\uffd3" +
    "\015\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\045\uffd3\047" +
    "\uffd3\051\uffd3\053\uffd3\001\002\000\026\007\uffc9\015\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\045\uffc9\047\uffc9\051" +
    "\uffc9\053\uffc9\001\002\000\026\007\uffcb\015\uffcb\017\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\045\uffcb\047\uffcb\051\uffcb\053" +
    "\uffcb\001\002\000\060\007\uffbd\015\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\026\114\027\111\030\uffbd\031\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\043\115\044\112\045\uffbd\047\uffbd\051\uffbd\053\uffbd\001" +
    "\002\000\012\042\056\052\044\062\055\063\045\001\002" +
    "\000\012\042\056\052\044\062\055\063\045\001\002\000" +
    "\050\007\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\030\122\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\120\041\121\045\uffc6\047\uffc6\051\uffc6\053\uffc6" +
    "\001\002\000\012\042\056\052\044\062\055\063\045\001" +
    "\002\000\012\042\056\052\044\062\055\063\045\001\002" +
    "\000\060\007\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\047\uffc3\051\uffc3\053\uffc3\001\002\000\060" +
    "\007\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\047\uffc2\051\uffc2\053\uffc2\001\002\000\020\007\126" +
    "\042\056\052\044\055\047\056\051\062\055\063\045\001" +
    "\002\000\016\042\056\052\044\055\047\056\051\062\055" +
    "\063\045\001\002\000\016\042\056\052\044\055\047\056" +
    "\051\062\055\063\045\001\002\000\060\007\uffb9\015\uffb9" +
    "\017\uffb9\021\uffb9\022\uffb9\023\uffb9\026\114\027\111\030" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\041\uffb9\043\115\044\112\045\uffb9\047\uffb9\051" +
    "\uffb9\053\uffb9\001\002\000\060\007\uffba\015\uffba\017\uffba" +
    "\021\uffba\022\uffba\023\uffba\026\114\027\111\030\uffba\031" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\043\115\044\112\045\uffba\047\uffba\051\uffba\053" +
    "\uffba\001\002\000\060\007\uffbc\015\uffbc\017\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\026\114\027\111\030\uffbc\031\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\115\044\112\045\uffbc\047\uffbc\051\uffbc\053\uffbc\001" +
    "\002\000\050\007\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\045\uffbb\047\uffbb\051\uffbb" +
    "\053\uffbb\001\002\000\060\007\uffc0\015\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\051\uffc0\053\uffc0" +
    "\001\002\000\060\007\uffc1\015\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\047\uffc1\051\uffc1\053\uffc1\001\002" +
    "\000\050\007\uffc7\015\uffc7\017\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\030\122\031\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\120\041\121\045\uffc7\047\uffc7\051\uffc7\053" +
    "\uffc7\001\002\000\060\007\uffb3\015\uffb3\017\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\047\uffb3\051\uffb3\053\uffb3\001" +
    "\002\000\006\007\134\053\135\001\002\000\060\007\uffb5" +
    "\015\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\045\uffb5\047" +
    "\uffb5\051\uffb5\053\uffb5\001\002\000\060\007\uffb6\015\uffb6" +
    "\017\uffb6\021\uffb6\022\uffb6\023\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\051" +
    "\uffb6\053\uffb6\001\002\000\060\007\uffbd\015\uffbd\017\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\026\114\027\111\030\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\043\115\044\112\045\uffbd\047\uffbd\051\uffbd\053" +
    "\uffbd\001\002\000\050\007\uffc5\015\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\030\122\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\120\041\121\045\uffc5\047\uffc5" +
    "\051\uffc5\053\uffc5\001\002\000\022\040\050\041\043\042" +
    "\056\052\044\055\047\056\051\062\055\063\045\001\002" +
    "\000\012\007\uff91\022\uff91\023\uff91\045\uff91\001\002\000" +
    "\024\040\050\041\043\042\056\052\044\053\145\055\047" +
    "\056\051\062\147\063\045\001\002\000\004\053\144\001" +
    "\002\000\012\007\uff9c\022\uff9c\023\uff9c\045\uff9c\001\002" +
    "\000\012\007\uff9a\022\uff9a\023\uff9a\045\uff9a\001\002\000" +
    "\004\053\150\001\002\000\054\007\uff9b\022\uff9b\023\uff9b" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf" +
    "\045\uff9b\046\uffaf\050\uffaf\053\uffaf\062\065\001\002\000" +
    "\012\007\uff99\022\uff99\023\uff99\045\uff99\001\002\000\004" +
    "\021\152\001\002\000\026\007\uffdc\016\022\020\025\022" +
    "\uffdc\023\uffdc\045\uffdc\057\021\060\027\061\024\062\030" +
    "\001\002\000\012\007\uff96\022\uff96\023\uff96\045\036\001" +
    "\002\000\010\007\uff94\022\156\023\155\001\002\000\022" +
    "\007\uffdc\016\022\020\025\045\uffdc\057\021\060\027\061" +
    "\024\062\030\001\002\000\022\040\050\041\043\042\056" +
    "\052\044\055\047\056\051\062\055\063\045\001\002\000" +
    "\004\007\160\001\002\000\012\007\uff97\022\uff97\023\uff97" +
    "\045\uff97\001\002\000\004\021\162\001\002\000\026\007" +
    "\uffdc\016\022\020\025\022\uffdc\023\uffdc\045\uffdc\057\021" +
    "\060\027\061\024\062\030\001\002\000\012\007\uff95\022" +
    "\uff95\023\uff95\045\036\001\002\000\006\007\uff93\045\036" +
    "\001\002\000\004\017\166\001\002\000\022\007\uffdc\016" +
    "\022\020\025\045\uffdc\057\021\060\027\061\024\062\030" +
    "\001\002\000\006\007\170\045\036\001\002\000\012\007" +
    "\uff92\022\uff92\023\uff92\045\uff92\001\002\000\024\040\050" +
    "\041\043\042\056\052\044\053\174\055\047\056\051\062" +
    "\176\063\045\001\002\000\004\053\173\001\002\000\012" +
    "\007\uff9e\022\uff9e\023\uff9e\045\uff9e\001\002\000\012\007" +
    "\uffa0\022\uffa0\023\uffa0\045\uffa0\001\002\000\004\053\177" +
    "\001\002\000\054\007\uff9d\022\uff9d\023\uff9d\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\045\uff9d\046" +
    "\uffaf\050\uffaf\053\uffaf\062\065\001\002\000\012\007\uff9f" +
    "\022\uff9f\023\uff9f\045\uff9f\001\002\000\012\004\uffa5\006" +
    "\uffa5\007\uffa5\012\234\001\002\000\014\004\uffa7\006\uffa7" +
    "\007\uffa7\012\uffa7\062\uffa7\001\002\000\014\004\uffa9\006" +
    "\uffa9\007\uffa9\012\uffa9\062\203\001\002\000\004\031\204" +
    "\001\002\000\014\013\205\014\214\024\206\025\213\062" +
    "\210\001\002\000\010\007\uffec\045\uffec\062\222\001\002" +
    "\000\010\007\ufff2\045\ufff2\053\ufff2\001\002\000\004\045" +
    "\220\001\002\000\010\007\ufff3\045\ufff3\053\ufff3\001\002" +
    "\000\010\007\ufff0\045\ufff0\053\ufff0\001\002\000\010\007" +
    "\uffef\045\uffef\053\uffef\001\002\000\010\007\ufff1\045\ufff1" +
    "\053\ufff1\001\002\000\022\040\050\041\043\042\056\052" +
    "\044\055\047\056\051\062\055\063\045\001\002\000\004" +
    "\015\216\001\002\000\014\013\205\014\214\024\206\025" +
    "\213\062\210\001\002\000\010\007\uffee\045\uffee\053\uffee" +
    "\001\002\000\014\004\uffa8\006\uffa8\007\uffa8\012\uffa8\062" +
    "\uffa8\001\002\000\006\047\230\054\231\001\002\000\006" +
    "\047\uffe8\054\uffe8\001\002\000\006\007\uffea\045\uffea\001" +
    "\002\000\006\007\226\045\225\001\002\000\010\007\uffec" +
    "\045\uffec\062\222\001\002\000\010\007\uffed\045\uffed\053" +
    "\uffed\001\002\000\006\007\uffe9\045\uffe9\001\002\000\004" +
    "\062\233\001\002\000\014\013\205\014\214\024\206\025" +
    "\213\062\210\001\002\000\006\007\uffeb\045\uffeb\001\002" +
    "\000\006\047\uffe7\054\uffe7\001\002\000\012\004\uffa3\006" +
    "\uffa3\007\uffa3\062\uffa3\001\002\000\010\004\ufffe\006\ufffe" +
    "\007\ufffe\001\002\000\010\004\237\006\uffff\007\uffff\001" +
    "\002\000\004\062\252\001\002\000\004\045\241\001\002" +
    "\000\016\004\uffae\006\uffae\007\uffae\010\011\011\uffae\012" +
    "\uffae\001\002\000\006\006\246\007\uffe5\001\002\000\004" +
    "\045\244\001\002\000\010\004\ufffd\006\ufffd\007\ufffd\001" +
    "\002\000\004\007\250\001\002\000\022\007\uffdc\016\022" +
    "\020\025\045\uffdc\057\021\060\027\061\024\062\030\001" +
    "\002\000\006\007\uffe4\045\036\001\002\000\004\062\251" +
    "\001\002\000\004\045\uffe6\001\002\000\012\012\253\045" +
    "\ufffb\052\256\062\222\001\002\000\004\062\222\001\002" +
    "\000\004\045\ufffc\001\002\000\006\045\264\053\275\001" +
    "\002\000\010\012\253\053\263\062\222\001\002\000\006" +
    "\047\230\054\260\001\002\000\014\013\205\014\214\024" +
    "\206\025\213\062\210\001\002\000\006\045\ufff5\053\ufff5" +
    "\001\002\000\006\045\264\053\265\001\002\000\004\045" +
    "\ufffa\001\002\000\006\012\266\062\222\001\002\000\004" +
    "\045\ufff9\001\002\000\004\062\222\001\002\000\006\047" +
    "\230\054\270\001\002\000\014\013\205\014\214\024\206" +
    "\025\213\062\210\001\002\000\006\045\ufff7\053\ufff7\001" +
    "\002\000\006\047\230\054\273\001\002\000\014\013\205" +
    "\014\214\024\206\025\213\062\210\001\002\000\006\045" +
    "\ufff6\053\ufff6\001\002\000\004\045\ufff8\001\002\000\006" +
    "\047\230\054\277\001\002\000\014\013\205\014\214\024" +
    "\206\025\213\062\210\001\002\000\006\045\ufff4\053\ufff4" +
    "\001\002\000\012\004\uffa6\006\uffa6\007\uffa6\062\222\001" +
    "\002\000\006\047\230\054\303\001\002\000\014\013\205" +
    "\014\214\024\206\025\213\062\210\001\002\000\004\045" +
    "\305\001\002\000\012\004\uffa4\006\uffa4\007\uffa4\062\uffa4" +
    "\001\002\000\016\004\uffad\006\uffad\007\uffad\011\uffad\012" +
    "\uffad\062\307\001\002\000\004\031\310\001\002\000\022" +
    "\040\050\041\043\042\056\052\044\055\047\056\051\062" +
    "\055\063\045\001\002\000\004\045\312\001\002\000\016" +
    "\004\uffac\006\uffac\007\uffac\011\uffac\012\uffac\062\uffac\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\021\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\011\023\012\001\001\000\004\005\305\001\001\000" +
    "\004\003\177\001\001\000\004\022\014\001\001\000\020" +
    "\010\031\011\030\012\022\013\034\014\025\015\032\016" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\041" +
    "\164\044\052\045\045\047\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\041\150\044\052\045\045\047" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\041\043\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\031\011\030\012\022\014\036\015\032\016" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\037\056\041\051\044\052\045\045\047\053\001\001\000" +
    "\002\001\001\000\006\045\135\047\053\001\001\000\012" +
    "\041\132\044\052\045\045\047\053\001\001\000\002\001" +
    "\001\000\004\046\130\001\001\000\002\001\001\000\006" +
    "\045\107\047\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\074\001\001\000\002\001\001\000\004" +
    "\043\063\001\001\000\004\047\062\001\001\000\002\001" +
    "\001\000\012\041\061\044\052\045\045\047\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\041\067\044\052\045\045\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\106" +
    "\045\045\047\053\001\001\000\010\044\105\045\045\047" +
    "\053\001\001\000\002\001\001\000\010\044\104\045\045" +
    "\047\053\001\001\000\010\044\103\045\045\047\053\001" +
    "\001\000\010\044\102\045\045\047\053\001\001\000\010" +
    "\044\101\045\045\047\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\112\001\001\000" +
    "\004\047\127\001\001\000\004\047\126\001\001\000\002" +
    "\001\001\000\004\047\116\001\001\000\004\047\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\124" +
    "\047\053\001\001\000\006\045\123\047\053\001\001\000" +
    "\006\045\122\047\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\136\001\001\000\002\001\001\000\012\041\140" +
    "\044\052\045\045\047\053\001\001\000\002\001\001\000" +
    "\012\041\145\044\052\045\045\047\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\031\011\030\012\022\013\152\014" +
    "\025\015\032\016\033\001\001\000\004\017\153\001\001" +
    "\000\004\020\156\001\001\000\020\010\031\011\030\012" +
    "\022\013\163\014\025\015\032\016\033\001\001\000\012" +
    "\041\160\044\052\045\045\047\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\031" +
    "\011\030\012\022\013\162\014\025\015\032\016\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\031\011\030\012\022\013\166\014\025\015" +
    "\032\016\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\174\044\052\045\045\047\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\063\001\001\000\002\001\001\000" +
    "\004\004\234\001\001\000\004\006\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\210\036\211\040" +
    "\206\001\001\000\006\032\220\033\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\041\214" +
    "\044\052\045\045\047\053\001\001\000\002\001\001\000" +
    "\010\034\210\036\211\040\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\223\001\001\000\002\001\001\000\006\032\220" +
    "\033\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\210\036\211\040\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\300\001" +
    "\001\000\004\024\235\001\001\000\004\026\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\011\023" +
    "\241\027\242\001\001\000\004\025\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\031\011\030\012\022\013\246\014\025\015\032\016\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\253\031\254\032\256\001\001\000\004" +
    "\032\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\261\032\256\001\001\000\002\001\001\000\010" +
    "\034\210\036\211\040\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\266\001\001" +
    "\000\002\001\001\000\004\032\271\001\001\000\002\001" +
    "\001\000\010\034\210\036\211\040\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\210\036\211\040" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\210\036\211\040\277\001\001\000" +
    "\002\001\001\000\004\032\301\001\001\000\002\001\001" +
    "\000\010\034\210\036\211\040\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\310\044\052\045\045\047\053\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	callee = 1;
	graph = new CallGraph();
	procedure = new Vector<String>();
	call_sites = new Vector<String>();
	call_edges = new Vector<String>();
	symbols = new Vector<Token>();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }


	public String current_procedure;
	public int callee;
	public Vector<String> procedure;
	public Vector<String>	call_sites;
	public Vector<String>	call_edges;
	public Vector<Token>	symbols;
	public CallGraph graph;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module ::= MODULE IDENTIFIER SEMICOLON declarations module_body END IDENTIFIER POINT 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
			if (!id1.equals(id2))
				throw new SemanticException();
			int flag = 0;
			/* call sites */
			for (int i=0;i<parser.call_sites.size();i++) {
				String[] splitInformation = parser.call_sites.elementAt(i).split("=");
				parser.graph.addCallSite(splitInformation[0], splitInformation[1], splitInformation[2]);
			}
			/* edges */
			for (int i=0; i< parser.call_edges.size(); i++){
				String[] splitInformation = parser.call_edges.elementAt(i).split("=");
				parser.graph.addEdge(splitInformation[0], splitInformation[1]);
			}
			
			/* Procedure match */
			for (int i=0; i< parser.call_edges.size(); i++){
				String[] splitEdges = parser.call_edges.elementAt(i).split("=");
				boolean found = false;
				for(int j=0;j< parser.procedure.size();j++){
					String[] splitProcedure = parser.procedure.elementAt(j).split("=");
					if (splitEdges[1].equals(splitProcedure[0]))
						found=true;
				}
				if (!found) throw new SemanticException();
			}
			/* Parameter*/
			for (int i=0; i<parser.call_sites.size();i++){
				String[] splitSites = parser.call_sites.elementAt(i).split("=");
				for(int j=0; j< parser.procedure.size();j++){
					String[] splitProcedure = parser.procedure.elementAt(j).split("=");

					if ((splitSites[2]).substring(0,(splitSites[2].indexOf("("))).equals(splitProcedure[0])){
						
						String parameters1 = splitSites[3].replace(",","").replace(" ","");
						String parameters2 = splitProcedure[1].replace(",","").replace(" ","").replace("(","").replace(")","");
						if (!parameters1.equals(parameters2))
							throw new ParameterMismatchedException();
					}					
				}
			}
			parser.graph.show();		
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarations ::= const_declarations type_declarations var_declarations procedure_declaration 
            {
              String RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedure_declaration ::= 
            {
              String RESULT =null;
		 parser.callee = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedure_declaration ::= procedure_declaration procedure_heading SEMICOLON procedure_body SEMICOLON 
            {
              String RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String head = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String body = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
				if (!head.equals(body))
					throw new SemanticException();
				parser.current_procedure = "";
				parser.callee = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_heading ::= PROCEDURE IDENTIFIER format_parameters 
            {
              String RESULT =null;
		int procedureNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedureNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String procedureName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int formalParametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalParametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String formalParameters = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				String newProcedure = new String(procedureName + "=" + "( " + formalParameters + " )");
				parser.procedure.addElement(newProcedure);
				parser.graph.addProcedure(procedureName,procedureName + "( " + formalParameters + " )");
				parser.current_procedure = procedureName;
				parser.callee = 1;
				RESULT = procedureName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // format_parameters ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // format_parameters ::= LeftParenthesis RightParenthesis 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // format_parameters ::= LeftParenthesis fp_section RightParenthesis 
            {
              String RESULT =null;
		int fp_sectionReturnStringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fp_sectionReturnStringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fp_sectionReturnString = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fp_sectionReturnString ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // format_parameters ::= fp_section RightParenthesis 
            {
              String RESULT =null;
		int fp_sectionReturnStringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fp_sectionReturnStringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fp_sectionReturnString = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (true) throw new MissingLeftParenthesisException(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("format_parameters",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fp_section ::= fp_section SEMICOLON identifier_list COLON special_type 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int identifierListReturnParamentNumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierListReturnParamentNumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> identifierListReturnParamentNum = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeStringReturnFromspecial_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeStringReturnFromspecial_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token typeStringReturnFromspecial_type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				for (int i=0; i<identifierListReturnParamentNum.size(); i++){
					RESULT = fp + ", "+ typeStringReturnFromspecial_type.type ;
				}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fp_section ::= fp_section SEMICOLON VAR identifier_list COLON special_type 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int identifierListReturnParamentNumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierListReturnParamentNumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> identifierListReturnParamentNum = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeStringReturnFromspecial_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeStringReturnFromspecial_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token typeStringReturnFromspecial_type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				for (int i=0; i<identifierListReturnParamentNum.size(); i++){
					RESULT = fp + ", "+ typeStringReturnFromspecial_type.type ;
				}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fp_section ::= identifier_list COLON special_type 
            {
              String RESULT =null;
		int identifierListReturnParamentNumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierListReturnParamentNumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> identifierListReturnParamentNum = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeStringReturnFromspecial_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeStringReturnFromspecial_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token typeStringReturnFromspecial_type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = "";
				for (int i=0; i<identifierListReturnParamentNum.size(); i++){
					RESULT += " "+ typeStringReturnFromspecial_type.type ;
				}
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fp_section ::= VAR identifier_list COLON special_type 
            {
              String RESULT =null;
		int identifierListReturnParamentNumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierListReturnParamentNumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> identifierListReturnParamentNum = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeStringReturnFromspecial_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeStringReturnFromspecial_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token typeStringReturnFromspecial_type = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
				RESULT = "";
				for (int i=0; i<identifierListReturnParamentNum.size(); i++){
					RESULT += " "+ typeStringReturnFromspecial_type.type	 ;
				}
 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // special_type ::= IDENTIFIER 
            {
              Token RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();
				boolean found = false;
				for (int i=0;i<parser.symbols.size();i++){
					if (parser.symbols.elementAt(i).name.equals(identifier)){
						RESULT.type = parser.symbols.elementAt(i).type;
						found= true;
					}
				}
				if (!found)
					throw new SemanticException();
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // special_type ::= INTEGER 
            {
              Token RESULT =null;
		
				RESULT = new Token();
				RESULT.type = "INTEGER";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // special_type ::= BOOLEAN 
            {
              Token RESULT =null;
		
				RESULT = new Token();
				RESULT.type = "BOOLEAN";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // special_type ::= record_type 
            {
              Token RESULT =null;
		int recordTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int recordTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token recordToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = new Token(recordToken);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // special_type ::= array_type 
            {
              Token RESULT =null;
		int arrayTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token arrayToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
				RESULT = new Token(arrayToken);

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("special_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // array_type ::= ARRAY expression OF special_type 
            {
              Token RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token typeToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new Token();
			RESULT.type= expressionToken.name  +"[" + typeToken.type +"]";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // record_type ::= RECORD field_list field_list_list END 
            {
              Token RESULT =null;
		int field_listTokneleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int field_listTokneright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token field_listTokne = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int field_list_listTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int field_list_listTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token field_list_listToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new Token();
			RESULT.type = field_listTokne.type +field_list_listToken.type;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // field_list ::= 
            {
              Token RESULT =null;
		RESULT = new Token();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_list ::= identifier_list COLON special_type 
            {
              Token RESULT =null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> identifierList = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int specialTypeTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int specialTypeTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token specialTypeToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();
				for (int i=0;i<identifierList.size(); i++){
					RESULT.type += specialTypeToken.type;
					RESULT.name += identifierList.elementAt(i).name;
				}


			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // field_list_list ::= 
            {
              Token RESULT =null;
		RESULT = new Token();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // field_list_list ::= field_list_list SEMICOLON field_list 
            {
              Token RESULT =null;
		int field_list_listTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int field_list_listTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token field_list_listToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int field_listTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int field_listTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token field_listToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();
				RESULT.name = field_list_listToken.name + field_listToken.name;
				RESULT.type = field_list_listToken.type + field_listToken.type;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier_list ::= IDENTIFIER 
            {
              Vector<Token> RESULT =null;
		int identifierNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifierName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Vector<Token>();
				RESULT.addElement(new Token(identifierName,""));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Vector<Token> RESULT =null;
		int previerIndentifierListParamentNumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int previerIndentifierListParamentNumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector<Token> previerIndentifierListParamentNum = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int identifierNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifierName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = previerIndentifierListParamentNum;
				RESULT.addElement(new Token(identifierName,""));

			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_body ::= declarations procedure_begin END IDENTIFIER 
            {
              String RESULT =null;
		int procedreNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procedreNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String procedreName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = procedreName;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_begin ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedure_begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_begin",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_sequence ::= statement_sequence SEMICOLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= readwritestatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int procedureNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedureNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String procedureName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int actualParametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actualParametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token actualParameters = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if (parser.callee==1 && parser.current_procedure.isEmpty()){
				parser.current_procedure = "Main";
				parser.graph.addProcedure("Main", "Main( )");
				String newProcedure = new String(parser.current_procedure + "=" + "( "  + " )");
				parser.procedure.addElement(newProcedure);
			}

			parser.call_sites.addElement(new String(parser.current_procedure+parser.callee + "=" + parser.current_procedure+"( )" + "=" + procedureName+"( "+actualParameters.name+")" + "=" + actualParameters.type));

			parser.call_edges.addElement(new String(parser.current_procedure+parser.callee + "=" + procedureName));
			parser.callee ++ ;
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // actual_parameters ::= 
            {
              Token RESULT =null;
		
			RESULT = new Token();			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // actual_parameters ::= LeftParenthesis expression_list RightParenthesis 
            {
              Token RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token parameters = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Token(parameters); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_list ::= 
            {
              Token RESULT =null;
		
				RESULT = new Token();	
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression_list ::= expression 
            {
              Token RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT =new Token(expressionToken);
				
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression_list ::= expression_list COMMA expression 
            {
              Token RESULT =null;
		int expressionNameListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionNameListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token expressionNameList = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();

				RESULT.name = expressionNameList.name + ","+ expressionToken.name;
				RESULT.type = expressionNameList.type + " " + expressionToken.type;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();
				RESULT.name = simpleExpressionToken.name;
				RESULT.type = simpleExpressionToken.type;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= simple_expression simple_expression_list 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int simpleExpressionListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = simpleExpressionToken.name + simpleExpressionListToken.name;
				RESULT.type = "BOOLEAN";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression_list ::= EQUAL simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = "=" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_expression_list ::= EQUAL 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_expression_list ::= NOTEQUAL simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = "#" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_expression_list ::= NOTEQUAL 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_expression_list ::= LessThan simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = "<" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_expression_list ::= LessThan 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_expression_list ::= LessThanOrEqual simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = "<=" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_expression_list ::= LessThanOrEqual 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_expression_list ::= GreatThan simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = ">" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple_expression_list ::= GreatThan 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple_expression_list ::= GreatThanOrEqual simple_expression 
            {
              Token RESULT =null;
		int simpleExpressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simpleExpressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token simpleExpressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if ((simpleExpressionToken.type.indexOf("INTEGER") ==-1 
						&& simpleExpressionToken.type.indexOf("ARRAY") ==-1 
						&& simpleExpressionToken.type.indexOf("RECORD") ==-1)){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = ">=" + simpleExpressionToken.name;
				RESULT.type = "BOOLEAN";
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple_expression_list ::= GreatThanOrEqual 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperandException();
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple_expression ::= term term_list 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					RESULT = new Token();
					RESULT.name = termToken.name + termListToken.name;
					RESULT.type = termToken.type;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simple_expression ::= PLUS term term_list 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(termListToken.type.indexOf("INTEGER") ==-1 
						&& termListToken.type.indexOf("ARRAY") ==-1 
						&& termListToken.type.indexOf("RECORD") ==-1)){
						throw new TypeMismatchedException();
					}
					RESULT = new Token();
					RESULT.name = "+" + termToken.name + termListToken.name;
					RESULT.type = termToken.type;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simple_expression ::= MINUS term term_list 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

					if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(termListToken.type.indexOf("INTEGER") ==-1 
						&& termListToken.type.indexOf("ARRAY") ==-1 
						&& termListToken.type.indexOf("RECORD") ==-1)){
						throw new TypeMismatchedException();
					}
					RESULT = new Token();
					RESULT.name = "-" + termToken.name + termListToken.name;
					RESULT.type = termToken.type;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= factor 
            {
              Token RESULT =null;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			RESULT = new Token(factorToken);
			
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= term TIMES factor 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(factorToken.type.indexOf("INTEGER") ==-1 
						&& factorToken.type.indexOf("ARRAY") ==-1 
						&& factorToken.type.indexOf("RECORD") ==-1)){
				throw new TypeMismatchedException();
			}
			RESULT = new Token();
			RESULT.name = termToken.name + "*"+factorToken.name;
			RESULT.type = "INTEGER";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term DIV factor 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(factorToken.type.indexOf("INTEGER") ==-1 
						&& factorToken.type.indexOf("ARRAY") ==-1 
						&& factorToken.type.indexOf("RECORD") ==-1)){
				throw new TypeMismatchedException();
			}
			RESULT = new Token();
			RESULT.name = termToken.name + "/" +factorToken.name;
			RESULT.type = "INTEGER";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term MOD factor 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(factorToken.type.indexOf("INTEGER") ==-1 
						&& factorToken.type.indexOf("ARRAY") ==-1 
						&& factorToken.type.indexOf("RECORD") ==-1)){
				throw new TypeMismatchedException();
			}
			RESULT = new Token();
			RESULT.name = termToken.name + "MOD" +factorToken.name;
			RESULT.type = "INTEGER";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= term AND factor 
            {
              Token RESULT =null;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
			if ((termToken.type.indexOf("BOOLEAN") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(factorToken.type.indexOf("BOOLEAN") ==-1 
						&& factorToken.type.indexOf("ARRAY") ==-1 
						&& factorToken.type.indexOf("RECORD") ==-1)){
				throw new TypeMismatchedException();
			}
			RESULT = new Token();
			RESULT.name = termToken.name + "AND" +factorToken.name;
			RESULT.type = "BOOLEAN";
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= TRUE 
            {
              Token RESULT =null;
		
			RESULT = new Token("","BOOLEAN");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= FALSE 
            {
              Token RESULT =null;
		
			RESULT = new Token("","BOOLEAN");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // term_list ::= 
            {
              Token RESULT =null;
		RESULT = new Token();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term_list ::= term_list PLUS term 
            {
              Token RESULT =null;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				
				if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(termListToken.type.indexOf("INTEGER") ==-1 
						&& termListToken.type.indexOf("ARRAY") ==-1 
						&& termListToken.type.indexOf("RECORD") ==-1)
						&& termListToken.type != ""){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = termListToken.name + "+" +termToken.name;
				RESULT.type = termToken.type;
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term_list ::= term_list PLUS END 
            {
              Token RESULT =null;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				if (true) throw new MissingOperandException();
		
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term_list ::= term_list MINUS term 
            {
              Token RESULT =null;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				if ((termToken.type.indexOf("INTEGER") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(termListToken.type.indexOf("INTEGER") ==-1 
						&& termListToken.type.indexOf("ARRAY") ==-1 
						&& termListToken.type.indexOf("RECORD") ==-1)
						&& termListToken.type != ""){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = termListToken.name + "-" +termToken.name;
				RESULT.type = termToken.type;
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term_list ::= term_list OR term 
            {
              Token RESULT =null;
		int termListTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int termListTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token termListToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int termTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int termTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token termToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

				if ((termToken.type.indexOf("BOOLEAN") ==-1 
						&& termToken.type.indexOf("ARRAY") ==-1 
						&& termToken.type.indexOf("RECORD") ==-1)|| 
						(termListToken.type.indexOf("BOOLEAN") ==-1 
						&& termListToken.type.indexOf("ARRAY") ==-1 
						&& termListToken.type.indexOf("RECORD") ==-1)
						&& termListToken.type != ""){
					throw new TypeMismatchedException();
				}
				RESULT = new Token();
				RESULT.name = termListToken.name + "OR" +termToken.name;
				RESULT.type = termToken.type;
			
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // factor ::= IDENTIFIER selector 
            {
              Token RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int selectorValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int selectorValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token selectorValue = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token();
				if (selectorValue.type == ""){
					RESULT.name = identifier;
					RESULT.type = "INTEGER";
				} else {
					RESULT.name = identifier + selectorValue.name;
					RESULT.type = selectorValue.type;
				} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // factor ::= NUMBER 
            {
              Token RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Token(number,"INTEGER");
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // factor ::= LeftParenthesis expression RightParenthesis 
            {
              Token RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
				RESULT = new Token(); 
				RESULT.name = "(" + expressionToken.name + ")";	
				RESULT.type = expressionToken.type;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // factor ::= LeftParenthesis expression END 
            {
              Token RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
				if (true) throw new MissingRightParenthesisException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // factor ::= NOT factor 
            {
              Token RESULT =null;
		int factorTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factorTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token factorToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				if (factorToken.type != "BOOLEAN")
					throw new TypeMismatchedException();
				RESULT = new Token(); 
				RESULT.name = "~" + factorToken.name;
				RESULT.type = factorToken.type;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= NUMBER NUMBER 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperatorException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= IDENTIFIER IDENTIFIER 
            {
              Token RESULT =null;
		
				if (true) throw new MissingOperatorException();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // selector ::= selector POINT IDENTIFIER 
            {
              Token RESULT =null;
		int previerSelectorNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int previerSelectorNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token previerSelectorName = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int selectorIndetifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int selectorIndetifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String selectorIndetifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
			RESULT = new Token();
			RESULT.name += previerSelectorName.name + "."+ selectorIndetifier;
			RESULT.type = "RECORD" ;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // selector ::= selector LeftBracket expression RightBracket 
            {
              Token RESULT =null;
		int previerSelectorNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int previerSelectorNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token previerSelectorName = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			RESULT = new Token();
			
			RESULT.name  += previerSelectorName.name + "[" + expressionToken.name + "]";
			RESULT.type = "ARRAY" ;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // selector ::= 
            {
              Token RESULT =null;
		
			RESULT = new Token("","");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // const_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declarations",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // const_declarations ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declarations",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // const_list ::= const_list IDENTIFIER EQUAL expression SEMICOLON 
            {
              Object RESULT =null;
		int identifierNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifierName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			parser.symbols.addElement(new Token(identifierName,expressionToken.type)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // const_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_declarations ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_list ::= type_list IDENTIFIER EQUAL special_type SEMICOLON 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token typeToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				parser.symbols.addElement(new Token(identifier,typeToken.type)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // var_declarations ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // var_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // var_list ::= var_list identifier_list COLON special_type SEMICOLON 
            {
              Object RESULT =null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector<Token> identifierList = (Vector<Token>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token typeToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				for (int i=0;i<identifierList.size();i++)
					parser.symbols.addElement(new Token(identifierList.elementAt(i).name,typeToken.type));
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // var_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // module_body ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // module_body ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module_body",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // readwritestatement ::= READ LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;
		
							if (true) throw new MissingOperandException();
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // readwritestatement ::= READ LeftParenthesis expression RightParenthesis 
            {
              Object RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // readwritestatement ::= READ IDENTIFIER RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // readwritestatement ::= READ LeftParenthesis IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // readwritestatement ::= WRITE IDENTIFIER RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // readwritestatement ::= WRITE LeftParenthesis IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // readwritestatement ::= WRITE LeftParenthesis RightParenthesis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // readwritestatement ::= WRITE LeftParenthesis expression RightParenthesis 
            {
              Object RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // readwritestatement ::= WRITELN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readwritestatement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // elsif_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              Object RESULT =null;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // assignment ::= IDENTIFIER selector ASSIGNMENT expression 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int selectorNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int selectorNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token selectorName = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token expressionToken = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			boolean found = false;
			for (int i=0; i<parser.symbols.size();i++){
				if (parser.symbols.elementAt(i).name.equals(identifier))
					if (parser.symbols.elementAt(i).type != expressionToken.type)
						throw new TypeMismatchedException();
			}
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
