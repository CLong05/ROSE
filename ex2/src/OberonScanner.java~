// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: oberon.flex

import java.io.*;
import exceptions.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class OberonScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\3\u2000"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\3\u2000\1\u4000\1\u4100"+
    "\4\u2000\1\u4200\11\u2000\3\u1100\1\u4300\1\u4400\13\u2000\4\u1100"+
    "\1\u4500\63\u2000\2\u1100\1\u4600\4\u2000\1\u4700\100\u2000\1\u4800"+
    "\40\u2000\1\u4900\1\u4a00\1\u2000\1\u4b00\1\u4c00\1\u4d00\1\u4e00"+
    "\26\u2000\1\u4f00\21\u2000\246\u1100\1\u5000\20\u1100\1\u5100\1\u5200"+
    "\77\u2000\2\u1100\1\u5200\u0b05\u2000\1\u5300\1\u5400\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\2\3\1\5\1\6\1\3\1\5\1\3\1\7"+
    "\1\10\1\11\1\5\1\3\1\5\2\3\1\12\7\13"+
    "\2\14\1\15\1\3\1\15\1\16\1\15\2\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\6\1\30\1\31\1\32\1\33\1\34\1\6\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\6\1\43\1\6"+
    "\1\5\1\3\1\5\1\3\1\6\1\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\6"+
    "\1\30\1\31\1\32\1\33\1\34\1\6\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\6\1\3"+
    "\1\44\1\3\1\5\41\0\2\3\4\6\4\3\1\6"+
    "\2\3\1\0\7\3\1\6\4\3\1\6\5\3\27\6"+
    "\1\3\37\6\1\3\70\6\2\27\115\6\1\36\u0142\6"+
    "\4\3\14\6\16\3\5\6\7\3\1\6\1\3\1\6"+
    "\21\3\160\0\5\6\1\3\2\6\2\3\4\6\10\3"+
    "\1\6\1\3\3\6\1\3\1\6\1\3\24\6\1\3"+
    "\123\6\1\3\213\6\1\3\5\0\2\3\236\6\11\3"+
    "\46\6\2\3\1\6\7\3\47\6\7\3\1\6\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\6\5\3\3\6\15\3\5\0\6\3"+
    "\1\6\4\3\13\0\5\3\53\6\37\0\4\3\2\6"+
    "\1\0\143\6\1\3\1\6\10\0\1\3\6\0\2\6"+
    "\2\0\1\3\4\0\2\6\12\0\3\6\2\3\1\6"+
    "\17\3\1\0\1\6\1\0\36\6\33\0\2\3\131\6"+
    "\13\0\1\6\16\3\12\0\41\6\11\0\2\6\4\3"+
    "\1\6\5\3\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\5\0\22\3\31\6\3\0\104\3\1\6\1\3"+
    "\13\6\67\3\33\0\1\3\4\0\66\6\3\0\1\6"+
    "\22\0\1\6\7\0\12\6\2\0\2\3\12\0\1\3"+
    "\7\6\1\3\7\6\1\3\3\0\1\3\10\6\2\3"+
    "\2\6\2\3\26\6\1\3\7\6\1\3\1\6\3\3"+
    "\4\6\2\3\1\0\1\6\7\0\2\3\2\0\2\3"+
    "\3\0\1\6\10\3\1\0\4\3\2\6\1\3\3\6"+
    "\2\0\2\3\12\0\4\6\7\3\1\6\5\3\3\0"+
    "\1\3\6\6\4\3\2\6\2\3\26\6\1\3\7\6"+
    "\1\3\2\6\1\3\2\6\1\3\2\6\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\6\1\3\1\6\7\3\14\0\3\6\1\0"+
    "\13\3\3\0\1\3\11\6\1\3\3\6\1\3\26\6"+
    "\1\3\7\6\1\3\2\6\1\3\5\6\2\3\1\0"+
    "\1\6\10\0\1\3\3\0\1\3\3\0\2\3\1\6"+
    "\17\3\2\6\2\0\2\3\12\0\1\3\1\6\17\3"+
    "\3\0\1\3\10\6\2\3\2\6\2\3\26\6\1\3"+
    "\7\6\1\3\2\6\1\3\5\6\2\3\1\0\1\6"+
    "\7\0\2\3\2\0\2\3\3\0\10\3\2\0\4\3"+
    "\2\6\1\3\3\6\2\0\2\3\12\0\1\3\1\6"+
    "\20\3\1\0\1\6\1\3\6\6\3\3\3\6\1\3"+
    "\4\6\3\3\2\6\1\3\1\6\1\3\2\6\3\3"+
    "\2\6\3\3\3\6\3\3\14\6\4\3\5\0\3\3"+
    "\3\0\1\3\4\0\2\3\1\6\6\3\1\0\16\3"+
    "\12\0\11\3\1\6\7\3\3\0\1\3\10\6\1\3"+
    "\3\6\1\3\27\6\1\3\12\6\1\3\5\6\3\3"+
    "\1\6\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\2\6\6\3\2\6\2\0\2\3\12\0\22\3"+
    "\2\0\1\3\10\6\1\3\3\6\1\3\27\6\1\3"+
    "\12\6\1\3\5\6\2\3\1\0\1\6\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\7\3\1\6\1\3"+
    "\2\6\2\0\2\3\12\0\1\3\2\6\17\3\2\0"+
    "\1\3\10\6\1\3\3\6\1\3\51\6\2\3\1\6"+
    "\7\0\1\3\3\0\1\3\4\0\1\6\10\3\1\0"+
    "\10\3\2\6\2\0\2\3\12\0\12\3\6\6\2\3"+
    "\2\0\1\3\22\6\3\3\30\6\1\3\11\6\1\3"+
    "\1\6\2\3\7\6\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\22\3\2\0\15\3\60\6\1\0"+
    "\2\6\7\0\4\3\10\6\10\0\1\3\12\0\47\3"+
    "\2\6\1\3\1\6\2\3\2\6\1\3\1\6\2\3"+
    "\1\6\6\3\4\6\1\3\7\6\1\3\3\6\1\3"+
    "\1\6\1\3\1\6\2\3\2\6\1\3\4\6\1\0"+
    "\2\6\6\0\1\3\2\0\1\6\2\3\5\6\1\3"+
    "\1\6\1\3\6\0\2\3\12\0\2\3\4\6\40\3"+
    "\1\6\27\3\2\0\6\3\12\0\13\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\2\0\10\6\1\3\44\6"+
    "\4\3\24\0\1\3\2\0\5\6\13\0\1\3\44\0"+
    "\11\3\1\0\71\3\53\6\24\0\1\6\12\0\6\3"+
    "\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0"+
    "\3\6\4\0\15\6\14\0\1\6\17\0\2\3\46\6"+
    "\1\3\1\6\5\3\1\6\2\3\53\6\1\3\u014d\6"+
    "\1\3\4\6\2\3\7\6\1\3\1\6\1\3\4\6"+
    "\2\3\51\6\1\3\4\6\2\3\41\6\1\3\4\6"+
    "\2\3\7\6\1\3\1\6\1\3\4\6\2\3\17\6"+
    "\1\3\71\6\1\3\4\6\2\3\103\6\2\3\3\0"+
    "\40\3\20\6\20\3\125\6\14\3\u016c\6\2\3\21\6"+
    "\1\3\32\6\5\3\113\6\3\3\3\6\17\3\15\6"+
    "\1\3\4\6\3\0\13\3\22\6\3\0\13\3\22\6"+
    "\2\0\14\3\15\6\1\3\3\6\1\3\2\0\14\3"+
    "\64\6\40\0\3\3\1\6\3\3\2\6\1\0\2\3"+
    "\12\0\41\3\3\0\2\3\12\0\6\3\130\6\10\3"+
    "\51\6\1\0\1\6\5\3\106\6\12\3\35\6\3\3"+
    "\14\0\4\3\14\0\12\3\12\0\36\6\2\3\5\6"+
    "\13\3\54\6\4\3\21\0\7\6\2\0\6\3\12\0"+
    "\46\3\27\6\5\0\4\3\65\6\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\6\130\3\5\0"+
    "\57\6\21\0\7\6\4\3\12\0\21\3\11\0\14\3"+
    "\3\0\36\6\15\0\2\6\12\0\54\6\16\0\14\3"+
    "\44\6\24\0\10\3\12\0\3\3\3\6\12\0\44\6"+
    "\122\3\3\0\1\3\25\0\4\6\1\0\4\6\3\0"+
    "\2\6\11\3\300\6\47\0\25\3\4\0\26\6\2\3"+
    "\6\6\2\3\46\6\2\3\6\6\2\3\10\6\1\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\37\6\2\3"+
    "\65\6\1\3\7\6\1\3\1\6\3\3\3\6\1\3"+
    "\7\6\3\3\4\6\2\3\6\6\4\3\15\6\5\3"+
    "\3\6\1\3\7\6\16\3\5\0\32\3\5\0\20\3"+
    "\2\6\23\3\1\6\13\3\5\0\5\3\6\0\1\3"+
    "\1\6\15\3\1\6\20\3\15\6\3\3\33\6\25\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\6\4\3"+
    "\1\6\2\3\12\6\1\3\1\6\3\3\5\6\6\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\4\6\1\3"+
    "\13\6\2\3\4\6\5\3\5\6\4\3\1\6\21\3"+
    "\51\6\u0177\3\57\6\1\3\57\6\1\3\205\6\6\3"+
    "\4\6\3\0\2\6\14\3\46\6\1\3\1\6\5\3"+
    "\1\6\2\3\70\6\7\3\1\6\17\3\1\0\27\6"+
    "\11\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\40\0\57\3\1\6\325\3\3\6\31\3\11\6"+
    "\6\0\1\3\5\6\2\3\5\6\4\3\126\6\2\3"+
    "\2\0\2\3\3\6\1\3\132\6\1\3\4\6\5\3"+
    "\51\6\3\3\136\6\21\3\33\6\65\3\306\6\112\3"+
    "\315\6\63\3\215\6\103\3\56\6\2\3\15\6\3\3"+
    "\20\6\12\0\2\6\24\3\57\6\1\0\4\3\12\0"+
    "\1\3\31\6\7\3\1\0\120\6\2\0\45\3\11\6"+
    "\2\3\147\6\2\3\4\6\1\3\4\6\14\3\13\6"+
    "\115\3\12\6\1\0\3\6\1\0\4\6\1\0\27\6"+
    "\5\0\20\3\1\6\7\3\64\6\14\3\2\0\62\6"+
    "\21\0\13\3\12\0\6\3\22\0\6\6\3\3\1\6"+
    "\4\3\12\0\34\6\10\0\2\3\27\6\15\0\14\3"+
    "\35\6\3\3\4\0\57\6\16\0\16\3\1\6\12\0"+
    "\46\3\51\6\16\0\11\3\3\6\1\0\10\6\2\0"+
    "\2\3\12\0\6\3\27\6\3\3\1\6\1\0\4\3"+
    "\60\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\3\3\6\2\3\13\6\5\0"+
    "\2\3\3\6\2\0\12\3\6\6\2\3\6\6\2\3"+
    "\6\6\11\3\7\6\1\3\7\6\221\3\43\6\10\0"+
    "\1\3\2\0\2\3\12\0\6\3\244\6\14\3\27\6"+
    "\4\3\61\6\u0104\3\156\6\2\3\152\6\46\3\7\6"+
    "\14\3\5\6\5\3\1\6\1\0\12\6\1\3\15\6"+
    "\1\3\5\6\1\3\1\6\1\3\2\6\1\3\2\6"+
    "\1\3\154\6\41\3\153\6\22\3\100\6\2\3\66\6"+
    "\50\3\15\6\3\3\20\0\20\3\7\0\14\3\2\6"+
    "\30\3\3\6\31\3\1\6\6\3\5\6\1\3\207\6"+
    "\2\3\1\0\4\3\1\6\13\3\12\0\7\3\32\6"+
    "\4\3\1\6\1\3\32\6\13\3\131\6\3\3\6\6"+
    "\2\3\6\6\2\3\6\6\2\3\3\6\3\3\2\6"+
    "\3\3\2\6\22\3\3\0\4\3\14\6\1\3\32\6"+
    "\1\3\23\6\1\3\2\6\1\3\17\6\2\3\16\6"+
    "\42\3\173\6\105\3\65\6\210\3\1\0\202\3\35\6"+
    "\3\3\61\6\57\3\37\6\21\3\33\6\65\3\36\6"+
    "\2\3\44\6\4\3\10\6\1\3\5\6\52\3\236\6"+
    "\2\3\12\0\126\3\6\6\2\3\1\6\1\3\54\6"+
    "\1\3\2\6\3\3\1\6\2\3\27\6\252\3\26\6"+
    "\12\3\32\6\106\3\70\6\6\3\2\6\100\3\1\6"+
    "\3\0\1\3\2\0\5\3\4\0\4\6\1\3\3\6"+
    "\1\3\33\6\4\3\3\0\4\3\1\0\40\3\35\6"+
    "\203\3\66\6\12\3\26\6\12\3\23\6\215\3\111\6"+
    "\267\3\3\0\65\6\17\0\37\3\12\0\20\3\3\0"+
    "\55\6\13\0\2\3\1\0\22\3\31\6\7\3\12\0"+
    "\6\3\3\0\44\6\16\0\1\3\12\0\100\3\3\0"+
    "\60\6\16\0\4\6\13\3\12\0\246\3\53\6\15\0"+
    "\10\3\12\0\66\3\157\6\221\3\143\6\235\3\57\6"+
    "\321\3\71\6\307\3\105\6\13\3\1\6\56\0\20\3"+
    "\4\0\15\6\140\3\2\6\u0163\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\6"+
    "\1\3\107\6\1\3\2\6\2\3\1\6\2\3\2\6"+
    "\2\3\4\6\1\3\14\6\1\3\1\6\1\3\7\6"+
    "\1\3\101\6\1\3\4\6\2\3\10\6\1\3\7\6"+
    "\1\3\34\6\1\3\4\6\1\3\5\6\1\3\1\6"+
    "\3\3\7\6\1\3\u0154\6\2\3\31\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\10\6\2\3\62\0\4\6\1\3\33\6\1\3"+
    "\2\6\1\3\1\6\2\3\1\6\1\3\12\6\1\3"+
    "\4\6\1\3\1\6\1\3\1\6\6\3\1\6\4\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\3\6\1\3"+
    "\2\6\1\3\1\6\2\3\1\6\1\3\1\6\1\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\2\6\1\3"+
    "\1\6\2\3\4\6\1\3\7\6\1\3\4\6\1\3"+
    "\4\6\1\3\1\6\1\3\12\6\1\3\21\6\5\3"+
    "\3\6\1\3\5\6\1\3\21\6\104\3\327\6\51\3"+
    "\65\6\13\3\336\6\343\3\1\0\36\3\140\0\200\3"+
    "\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21760];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\3\2\5\1\3"+
    "\15\4\4\0\2\6\1\7\2\10\5\4\1\11\4\4"+
    "\1\3\7\4\1\0\2\10\6\4\1\3\5\4\1\12"+
    "\2\4\1\13\1\6\11\4\1\13\3\4\1\12\1\6"+
    "\1\0\2\4\1\6\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\45\0\157\0\224\0\271"+
    "\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\45\0\u032e\0\271\0\u0353\0\u0378\0\45\0\u039d\0\u03c2"+
    "\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\157\0\u04c5"+
    "\0\u04ea\0\u050f\0\u0534\0\157\0\u0559\0\u057e\0\u05a3\0\u05c8"+
    "\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0"+
    "\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818"+
    "\0\u083d\0\u0862\0\157\0\u0887\0\u08ac\0\u08d1\0\u08f6\0\u091b"+
    "\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43"+
    "\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0a68\0\u0b21\0\u0b46"+
    "\0\u0b6b\0\u0b90\0\u0bb5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\5"+
    "\1\10\1\11\2\12\1\13\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\3\6\1\21\1\6\1\22\1\6\1\23"+
    "\1\24\1\25\1\6\1\26\1\6\1\27\1\30\1\6"+
    "\1\2\7\31\1\32\1\31\1\33\35\31\1\3\4\31"+
    "\1\32\1\31\1\33\33\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\25\6\10\31\1\34\1\31"+
    "\1\35\42\31\1\32\1\36\1\33\41\31\1\37\1\32"+
    "\1\31\1\33\2\11\1\40\2\31\25\37\1\41\6\31"+
    "\1\37\1\32\1\31\1\33\3\12\2\31\25\37\10\31"+
    "\1\32\1\31\1\33\4\31\1\5\26\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\16\6\1\42"+
    "\6\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\4\6\1\43\7\6\1\44\10\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\14\6\1\45\10\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\10\6\1\46\3\6\1\47"+
    "\10\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\11\6\1\50\1\6\1\51\11\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\5\6\1\47\5\6\1\52\11\6\1\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\14\6\1\53"+
    "\10\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\5\6\1\47\10\6\1\54\6\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\16\6\1\55\6\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\4\6\1\56\20\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\7\6\1\57\14\6\1\60\1\31\1\6\5\31\1\6"+
    "\1\32\1\31\1\33\3\6\2\31\1\61\24\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\7\6\1\62\6\6\1\63\6\6\10\31\1\34\1\31"+
    "\1\0\42\31\1\34\1\31\1\33\33\31\11\35\1\64"+
    "\33\35\1\37\5\31\1\37\1\32\1\31\1\33\3\37"+
    "\2\31\25\37\7\31\1\37\1\32\1\31\1\33\2\65"+
    "\1\40\2\31\25\37\1\41\7\31\1\32\1\31\1\33"+
    "\2\66\1\41\27\31\1\41\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\16\6\1\67\6\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\6\6\1\70\16\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\14\6\1\71\10\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\13\6\1\72\11\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\22\6\1\54\2\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\17\6\1\73\5\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\3\6\1\47\21\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\20\6\1\74\4\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\3\6\1\75\21\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\14\6\1\76\10\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\1\77\1\6\1\100\22\6"+
    "\1\31\1\6\5\31\1\6\1\32\1\31\1\33\3\6"+
    "\2\31\4\6\1\101\20\6\1\31\1\6\5\31\1\6"+
    "\1\32\1\31\1\33\3\6\2\31\15\6\1\102\7\6"+
    "\1\31\1\6\5\31\1\6\1\32\1\31\1\33\3\6"+
    "\2\31\16\6\1\103\6\6\1\31\1\6\5\31\1\6"+
    "\1\32\1\31\1\33\3\6\2\31\10\6\1\104\14\6"+
    "\1\31\1\6\5\31\1\6\1\32\1\31\1\33\3\6"+
    "\2\31\10\6\1\105\14\6\1\31\10\35\1\106\1\107"+
    "\33\35\6\31\1\37\1\32\1\31\1\33\3\65\2\31"+
    "\25\37\10\31\1\32\1\31\1\33\3\66\30\31\1\6"+
    "\5\31\1\6\1\32\1\31\1\33\3\6\2\31\1\110"+
    "\24\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\10\6\1\101\14\6\1\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\11\6\1\111"+
    "\13\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\17\6\1\112\5\6\1\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\4\6\1\47"+
    "\3\6\1\113\14\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\4\6\1\114\20\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\21\6\1\104\3\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\2\6\1\115\22\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\3\6\1\103\21\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\14\6\1\116\10\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\13\6\1\47\11\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\4\6\1\103\20\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\11\6\1\117\13\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\20\6\1\120\4\6\1\31"+
    "\45\0\10\35\1\121\1\107\33\35\1\6\5\31\1\6"+
    "\1\32\1\31\1\33\3\6\2\31\24\6\1\103\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\4\6\1\122\20\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\20\6\1\103\4\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\5\6\1\47\17\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\6\6\1\123\16\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\4\6\1\124\20\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\16\6\1\77\6\6\1\31"+
    "\1\6\5\31\1\6\1\32\1\31\1\33\3\6\2\31"+
    "\4\6\1\47\20\6\1\31\1\6\5\31\1\6\1\32"+
    "\1\31\1\33\3\6\2\31\4\6\1\125\20\6\1\31"+
    "\11\126\1\127\33\126\1\6\5\31\1\6\1\32\1\31"+
    "\1\33\3\6\2\31\1\130\24\6\1\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\4\6\1\61"+
    "\20\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\3\6\1\131\21\6\1\31\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\11\6\1\130"+
    "\13\6\1\31\10\126\1\0\1\132\33\126\1\6\5\31"+
    "\1\6\1\32\1\31\1\33\3\6\2\31\13\6\1\103"+
    "\11\6\1\31\1\6\5\31\1\6\1\32\1\31\1\33"+
    "\3\6\2\31\21\6\1\133\3\6\1\31\11\126\1\132"+
    "\33\126\1\6\5\31\1\6\1\32\1\31\1\33\3\6"+
    "\2\31\16\6\1\117\6\6\1\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3034];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\27\1\4\0\27\1\1\0\21\1\1\11\20\1"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  int get_line(){	return yyline;}
  int get_column(){	return yycolumn;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String yylex() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return "EOF";
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new IllegalSymbolException();
            }
            // fall through
          case 12: break;
          case 2:
            { 
            }
            // fall through
          case 13: break;
          case 3:
            { return "OPERATOR";
            }
            // fall through
          case 14: break;
          case 4:
            { if(yylength() > 24) throw new IllegalIdentifierLengthException();
                                        else return "Identifier";
            }
            // fall through
          case 15: break;
          case 5:
            { if(yylength() > 12) throw new IllegalIntegerRangeException();
                                        else return "NUMBER";
            }
            // fall through
          case 16: break;
          case 6:
            { throw new MismatchedCommentException();
            }
            // fall through
          case 17: break;
          case 7:
            { throw new IllegalIntegerException();
            }
            // fall through
          case 18: break;
          case 8:
            { throw new IllegalOctalException();
            }
            // fall through
          case 19: break;
          case 9:
            { return "ReservedWord";
            }
            // fall through
          case 20: break;
          case 10:
            { return "Keyword";
            }
            // fall through
          case 21: break;
          case 11:
            { return "COMMENT";
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
