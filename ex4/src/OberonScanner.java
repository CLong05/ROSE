/* The following code was generated by JFlex 1.8.2，仅对返回值类型进行简单修改 */

import java_cup.runtime.*;
import java.io.*;
import exceptions.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>../src/oberon.flex</tt>
 */
public class OberonScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\11\1\5\1\4\1\7\1\0\1\4\1\6\16\11\4\0\1\4"+
    "\2\0\1\27\1\10\1\0\1\33\1\0\1\1\1\3\1\2\1\16"+
    "\1\55\1\17\1\56\1\0\1\12\7\14\2\13\1\25\1\54\1\30"+
    "\1\26\1\31\2\0\1\52\1\45\1\47\1\20\1\40\1\35\1\46"+
    "\1\37\1\21\2\10\1\42\1\23\1\41\1\24\1\51\1\10\1\32"+
    "\1\43\1\36\1\50\1\22\1\44\1\10\1\53\1\10\1\57\1\0"+
    "\1\60\1\0\1\10\1\0\1\52\1\45\1\47\1\20\1\40\1\35"+
    "\1\46\1\37\1\21\2\10\1\42\1\23\1\41\1\24\1\51\1\10"+
    "\1\32\1\43\1\36\1\50\1\22\1\44\1\10\1\53\1\10\1\0"+
    "\1\15\1\0\1\34\41\11\2\0\4\10\4\0\1\10\2\0\1\11"+
    "\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10\1\0\u013f\10"+
    "\31\0\162\10\4\0\14\10\16\0\5\10\11\0\1\10\21\0\130\11"+
    "\5\0\23\11\12\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\0\24\10\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10"+
    "\1\0\4\11\3\0\105\10\1\0\46\10\2\0\2\10\6\0\20\10"+
    "\41\0\46\10\2\0\1\10\7\0\47\10\11\0\21\11\1\0\27\11"+
    "\1\0\3\11\1\0\1\11\1\0\2\11\1\0\1\11\13\0\33\10"+
    "\5\0\3\10\15\0\4\11\14\0\6\11\13\0\32\10\5\0\13\10"+
    "\16\11\7\0\12\11\4\0\2\10\1\11\143\10\1\0\1\10\10\11"+
    "\1\0\6\11\2\10\2\11\1\0\4\11\2\10\12\11\3\10\2\0"+
    "\1\10\17\0\1\11\1\10\1\11\36\10\33\11\2\0\3\10\60\0"+
    "\46\10\13\11\1\10\u014f\0\3\11\66\10\2\0\1\11\1\10\20\11"+
    "\2\0\1\10\4\11\3\0\12\10\2\11\2\0\12\11\21\0\3\11"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\1\10"+
    "\3\0\4\10\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11"+
    "\11\0\1\11\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10"+
    "\15\0\3\11\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11"+
    "\4\0\2\11\2\0\3\11\13\0\4\10\1\0\1\10\7\0\14\11"+
    "\3\10\14\0\3\11\1\0\11\10\1\0\3\10\1\0\26\10\1\0"+
    "\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\10\11\1\0"+
    "\3\11\1\0\3\11\2\0\1\10\17\0\2\10\2\11\2\0\12\11"+
    "\1\0\1\10\17\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\6\11"+
    "\3\0\2\11\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10"+
    "\4\0\12\11\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0"+
    "\3\10\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0"+
    "\2\10\3\0\3\10\3\0\10\10\1\0\3\10\4\0\5\11\3\0"+
    "\3\11\1\0\4\11\11\0\1\11\17\0\11\11\11\0\1\10\7\0"+
    "\3\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\4\0\7\11\1\0\3\11\1\0\4\11\7\0\2\11\11\0"+
    "\2\10\4\0\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10\4\0"+
    "\12\11\22\0\2\11\1\0\10\10\1\0\3\10\1\0\27\10\1\0"+
    "\20\10\4\0\6\11\2\0\3\11\1\0\4\11\11\0\1\11\10\0"+
    "\2\10\4\0\12\11\22\0\2\11\1\0\22\10\3\0\30\10\1\0"+
    "\11\10\1\0\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0"+
    "\1\11\1\0\10\11\22\0\2\11\15\0\60\10\1\11\2\10\7\11"+
    "\4\0\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10\2\0"+
    "\2\10\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0"+
    "\3\10\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\11"+
    "\2\10\6\11\1\0\2\11\1\10\2\0\5\10\1\0\1\10\1\0"+
    "\6\11\2\0\12\11\2\0\2\10\42\0\1\10\27\0\2\11\6\0"+
    "\12\11\13\0\1\11\1\0\1\11\1\0\1\11\4\0\2\11\10\10"+
    "\1\0\42\10\6\0\24\11\1\0\2\11\4\10\4\0\10\11\1\0"+
    "\44\11\11\0\1\11\71\0\42\10\1\0\5\10\1\0\2\10\1\0"+
    "\7\11\3\0\4\11\6\0\12\11\6\0\6\10\4\11\106\0\46\10"+
    "\12\0\51\10\7\0\132\10\5\0\104\10\5\0\122\10\6\0\7\10"+
    "\1\0\77\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\1\10"+
    "\1\0\4\10\2\0\47\10\1\0\1\10\1\0\4\10\2\0\37\10"+
    "\1\0\1\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\7\10\1\0\27\10\1\0\37\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\47\10\1\0\23\10\16\0\11\11"+
    "\56\0\125\10\14\0\u026c\10\2\0\10\10\12\0\32\10\5\0\113\10"+
    "\3\0\3\10\17\0\15\10\1\0\4\10\3\11\13\0\22\10\3\11"+
    "\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11\14\0"+
    "\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11\41\0"+
    "\3\11\2\0\12\11\6\0\130\10\10\0\51\10\1\11\126\0\35\10"+
    "\3\0\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\u038b\0"+
    "\154\10\224\0\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\17\0\4\11\32\0\5\11\20\0\2\10\23\0"+
    "\1\10\13\0\4\11\6\0\6\11\1\0\1\10\15\0\1\10\40\0"+
    "\22\10\36\0\15\11\4\0\1\11\3\0\6\11\27\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0"+
    "\3\10\5\0\5\10\26\0\44\10\u0e81\0\3\10\31\0\11\10\6\11"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10"+
    "\1\0\137\10\5\0\50\10\4\0\136\10\21\0\30\10\70\0\20\10"+
    "\u0200\0\u19b6\10\112\0\u51a6\10\132\0\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10"+
    "\2\0\73\10\225\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10"+
    "\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10"+
    "\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10"+
    "\3\0\20\11\20\0\4\11\17\0\2\10\30\0\3\10\31\0\1\10"+
    "\6\0\5\10\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11"+
    "\7\0\32\10\4\0\1\10\1\0\32\10\12\0\132\10\3\0\6\10"+
    "\2\0\6\10\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10"+
    "\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\2\7"+
    "\1\10\1\11\5\6\1\12\1\13\1\14\1\15\1\16"+
    "\1\6\1\17\1\20\7\6\1\21\1\22\1\23\1\24"+
    "\1\25\5\0\1\26\2\27\1\6\1\30\1\31\3\6"+
    "\1\32\1\33\1\34\1\35\1\36\14\6\2\37\1\0"+
    "\2\27\1\40\1\6\1\41\1\42\4\6\1\43\10\6"+
    "\1\37\1\44\3\6\1\45\1\46\1\47\1\6\1\50"+
    "\7\6\1\44\3\6\1\51\1\52\1\53\1\6\1\54"+
    "\1\55\1\6\1\56\1\37\1\0\1\6\1\57\1\60"+
    "\3\6\1\37\1\61\1\62\1\63\2\6\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\61\0\61\0\223\0\304"+
    "\0\365\0\u0126\0\61\0\61\0\u0157\0\u0188\0\u01b9\0\u01ea"+
    "\0\u021b\0\u024c\0\61\0\61\0\u027d\0\u02ae\0\u02df\0\61"+
    "\0\61\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\304\0\304"+
    "\0\u05ef\0\u0620\0\u0651\0\304\0\304\0\61\0\61\0\61"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\61\0\u04fa\0\u08ce\0\u08ff"+
    "\0\u0930\0\304\0\u0961\0\304\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\304\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\304"+
    "\0\304\0\304\0\u0d04\0\304\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\304"+
    "\0\u0f50\0\304\0\u0f81\0\304\0\304\0\u0fb2\0\304\0\u0e8c"+
    "\0\u0fe3\0\u1014\0\304\0\304\0\u1045\0\u1076\0\u10a7\0\u10d8"+
    "\0\304\0\304\0\304\0\u1109\0\u113a\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\6\1\10"+
    "\1\2\1\11\2\12\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\10\1\32\1\10\1\33\3\10"+
    "\1\34\1\35\1\10\1\36\1\10\1\37\1\40\1\10"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\57\46\1\51\1\52\57\46\1\47\1\50\4\46\1\6"+
    "\52\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\5\10\5\46\1\10\2\46\17\10\6\46\1\47\1\50"+
    "\5\46\1\53\1\46\1\11\1\54\1\11\1\55\2\46"+
    "\5\53\5\46\1\53\2\46\17\53\6\46\1\47\1\50"+
    "\5\46\1\53\1\46\3\12\3\46\5\53\5\46\1\53"+
    "\2\46\17\53\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\1\10\1\56\2\10\1\57\5\46\1\10"+
    "\2\46\17\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\10\2\46\1\60\3\10"+
    "\1\61\12\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\10\2\46\15\10\1\62"+
    "\1\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\4\10\1\63\5\46\1\10\2\46\17\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\64\2\46\1\65\16\10\6\46\1\47\1\50"+
    "\23\46\1\66\33\46\1\47\1\50\23\46\1\67\33\46"+
    "\1\47\1\50\23\46\1\70\33\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\5\10\5\46\1\10\2\46"+
    "\3\10\1\71\13\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\2\10"+
    "\1\72\13\10\1\73\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\4\10"+
    "\1\74\1\75\11\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\76\2\46\2\10"+
    "\1\77\14\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\4\10\1\100\5\46\1\10\2\46\3\10"+
    "\1\101\13\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\4\10\1\102\5\46\1\10\2\46\17\10"+
    "\6\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\5\10\5\46\1\103\2\46\17\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\104"+
    "\2\46\17\10\6\46\1\51\1\0\57\46\1\47\1\50"+
    "\1\105\56\46\1\51\1\50\56\46\2\106\1\107\56\106"+
    "\1\46\1\47\1\50\2\46\1\53\2\46\5\53\3\46"+
    "\5\53\5\46\1\53\2\46\17\53\6\46\1\47\1\50"+
    "\5\46\1\53\1\46\1\110\1\54\1\110\1\55\2\46"+
    "\5\53\5\46\1\53\2\46\17\53\6\46\1\47\1\50"+
    "\7\46\1\111\1\55\1\111\1\55\44\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\2\10\1\112\2\10"+
    "\5\46\1\10\2\46\17\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\5\10\5\46\1\10\2\46"+
    "\1\10\1\113\15\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\114\2\46\17\10"+
    "\6\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\1\115\4\10\5\46\1\10\2\46\17\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\12\10\1\116\2\10\1\117\1\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\10\2\46\3\10\1\120\13\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\14\10\1\121\2\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\1\122\4\10\5\46"+
    "\1\10\2\46\17\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\6\10"+
    "\1\123\10\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\1\10\1\124\3\10\5\46\1\10\2\46"+
    "\17\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\1\10\1\125\3\10\5\46\1\10\2\46\17\10"+
    "\6\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\4\10\1\126\5\46\1\10\2\46\17\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\11\10\1\127\5\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\4\10\1\130\12\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\4\10\1\131\5\46\1\10"+
    "\2\46\17\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\132\2\46\17\10\5\46"+
    "\2\106\1\133\1\134\55\106\1\46\1\47\1\50\5\46"+
    "\1\53\1\46\3\110\3\46\5\53\5\46\1\53\2\46"+
    "\17\53\6\46\1\47\1\50\7\46\3\111\45\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\3\10\1\135\13\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\13\10\1\136\3\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\4\10\1\137\5\46\1\10"+
    "\2\46\17\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\1\140\4\10\5\46\1\10\2\46\17\10"+
    "\6\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\5\10\5\46\1\10\2\46\4\10\1\141\12\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\10\2\46\3\10\1\142\13\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\1\10\1\143"+
    "\3\10\5\46\1\10\2\46\3\10\1\144\13\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\10\2\46\1\10\1\145\15\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\5\10\1\146\11\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\5\10\1\147\11\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\1\10\1\150\3\10\5\46"+
    "\1\10\2\46\17\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\6\10"+
    "\1\151\10\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\10\2\46\12\10\1\152"+
    "\4\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\5\10\5\46\1\10\2\46\15\10\1\153\1\10"+
    "\5\46\2\106\1\133\1\154\55\106\61\0\1\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\11\10\1\155\5\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\5\10\1\156\11\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\5\10\5\46\1\157\2\46"+
    "\17\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\5\10\5\46\1\10\2\46\1\160\16\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\10\2\46\3\10\1\161\13\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\3\10\1\162\13\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\3\10\1\163\13\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\5\10\5\46\1\10\2\46"+
    "\4\10\1\164\12\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\1\10"+
    "\1\165\15\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\10\2\46\3\10\1\166"+
    "\13\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\5\10\5\46\1\10\2\46\16\10\1\167\5\46"+
    "\2\170\1\171\56\170\1\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\3\10"+
    "\1\172\13\10\6\46\1\47\1\50\2\46\1\10\2\46"+
    "\5\10\3\46\5\10\5\46\1\10\2\46\3\10\1\173"+
    "\13\10\6\46\1\47\1\50\2\46\1\10\2\46\5\10"+
    "\3\46\1\174\4\10\5\46\1\10\2\46\17\10\6\46"+
    "\1\47\1\50\2\46\1\10\2\46\5\10\3\46\5\10"+
    "\5\46\1\10\2\46\5\10\1\175\11\10\6\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\10\2\46\15\10\1\176\1\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\1\177\4\10\5\46"+
    "\1\10\2\46\17\10\5\46\2\170\1\200\1\0\55\170"+
    "\1\46\1\47\1\50\2\46\1\10\2\46\5\10\3\46"+
    "\5\10\5\46\1\201\2\46\17\10\6\46\1\47\1\50"+
    "\2\46\1\10\2\46\5\10\3\46\5\10\5\46\1\10"+
    "\2\46\4\10\1\202\12\10\6\46\1\47\1\50\2\46"+
    "\1\10\2\46\5\10\3\46\5\10\5\46\1\10\2\46"+
    "\4\10\1\203\12\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\13\10"+
    "\1\204\3\10\5\46\2\170\1\200\56\170\1\46\1\47"+
    "\1\50\2\46\1\10\2\46\5\10\3\46\5\10\5\46"+
    "\1\205\2\46\17\10\6\46\1\47\1\50\2\46\1\10"+
    "\2\46\5\10\3\46\5\10\5\46\1\10\2\46\3\10"+
    "\1\206\13\10\5\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4459];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\44\1\5\0\34\1\1\0\24\1\1\11\34\1"+
    "\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true     the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true   the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
int get_line(){	return yyline;}
int get_column(){	return yycolumn;}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OberonScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1806) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return new Symbol(Token.PROCEDURE, yytext());
          }
        case 53: break;
        case 17: 
          { return new Symbol(Token.SEMI, yytext());
          }
        case 54: break;
        case 31: 
          { throw new MismatchedCommentException(yytext());
          }
        case 55: break;
        case 7: 
          { if (yylength() > 12)
				throw new IllegalIntegerRangeException(yytext());
			if (yytext().charAt(0) == '0' && yytext().length()>1)
				return new Symbol(Token.NUMBER, yytext());
			return new Symbol(Token.NUMBER, yytext());
          }
        case 56: break;
        case 29: 
          { return new Symbol(Token.LE, yytext());
          }
        case 57: break;
        case 41: 
          { return new Symbol(Token.ELSIF, yytext());
          }
        case 58: break;
        case 48: 
          { return new Symbol(Token.RECORD, yytext());
          }
        case 59: break;
        case 10: 
          { return new Symbol(Token.COLON, yytext());
          }
        case 60: break;
        case 16: 
          { return new Symbol(Token.NOT, yytext());
          }
        case 61: break;
        case 18: 
          { return new Symbol(Token.COMMA, yytext());
          }
        case 62: break;
        case 8: 
          { return new Symbol(Token.PLUS, yytext());
          }
        case 63: break;
        case 20: 
          { return new Symbol(Token.LBRACKET, yytext());
          }
        case 64: break;
        case 6: 
          { if (yylength() > 24)
				throw new IllegalIdentifierLengthException(yytext());
			return new Symbol(Token.IDENTIFIER, yytext());
          }
        case 65: break;
        case 24: 
          { return new Symbol(Token.DO, yytext());
          }
        case 66: break;
        case 36: 
          { /*Do nothing*/
          }
        case 67: break;
        case 4: 
          { return new Symbol(Token.RPAREN, yytext());
          }
        case 68: break;
        case 32: 
          { return new Symbol(Token.DIVIDE, yytext());
          }
        case 69: break;
        case 15: 
          { return new Symbol(Token.AND, yytext());
          }
        case 70: break;
        case 44: 
          { return new Symbol(Token.BEGIN, yytext());
          }
        case 71: break;
        case 42: 
          { return new Symbol(Token.WRITE, yytext());
          }
        case 72: break;
        case 50: 
          { return new Symbol(Token.WRITELN, yytext());
          }
        case 73: break;
        case 5: 
          { /*skip it*/
          }
        case 74: break;
        case 34: 
          { return new Symbol(Token.MOD, yytext());
          }
        case 75: break;
        case 26: 
          { return new Symbol(Token.OR, yytext());
          }
        case 76: break;
        case 40: 
          { return new Symbol(Token.ELSE, yytext());
          }
        case 77: break;
        case 11: 
          { return new Symbol(Token.EQ, yytext());
          }
        case 78: break;
        case 9: 
          { return new Symbol(Token.MINUS, yytext());
          }
        case 79: break;
        case 30: 
          { return new Symbol(Token.GE, yytext());
          }
        case 80: break;
        case 28: 
          { return new Symbol(Token.ASSIGN, yytext());
          }
        case 81: break;
        case 38: 
          { return new Symbol(Token.THEN, yytext());
          }
        case 82: break;
        case 33: 
          { return new Symbol(Token.VAR, yytext());
          }
        case 83: break;
        case 23: 
          { throw new IllegalOctalException(yytext());
          }
        case 84: break;
        case 45: 
          { return new Symbol(Token.CONST, yytext());
          }
        case 85: break;
        case 39: 
          { return new Symbol(Token.TYPE, yytext());
          }
        case 86: break;
        case 21: 
          { return new Symbol(Token.RBRACKET, yytext());
          }
        case 87: break;
        case 25: 
          { return new Symbol(Token.IF, yytext());
          }
        case 88: break;
        case 1: 
          { throw new IllegalSymbolException(yytext());
          }
        case 89: break;
        case 13: 
          { return new Symbol(Token.LT, yytext());
          }
        case 90: break;
        case 3: 
          { return new Symbol(Token.TIMES, yytext());
          }
        case 91: break;
        case 46: 
          { return new Symbol(Token.ARRAY, yytext());
          }
        case 92: break;
        case 2: 
          { return new Symbol(Token.LPAREN, yytext());
          }
        case 93: break;
        case 49: 
          { return new Symbol(Token.INTEGER, yytext());
          }
        case 94: break;
        case 37: 
          { return new Symbol(Token.READ, yytext());
          }
        case 95: break;
        case 35: 
          { return new Symbol(Token.END, yytext());
          }
        case 96: break;
        case 12: 
          { return new Symbol(Token.NEQ, yytext());
          }
        case 97: break;
        case 47: 
          { return new Symbol(Token.MODULE, yytext());
          }
        case 98: break;
        case 19: 
          { return new Symbol(Token.PERIOD, yytext());
          }
        case 99: break;
        case 43: 
          { return new Symbol(Token.WHILE, yytext());
          }
        case 100: break;
        case 22: 
          { throw new IllegalIntegerException(yytext());
          }
        case 101: break;
        case 51: 
          { return new Symbol(Token.BOOLEAN, yytext());
          }
        case 102: break;
        case 14: 
          { return new Symbol(Token.GT, yytext());
          }
        case 103: break;
        case 27: 
          { return new Symbol(Token.OF, yytext());
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(Token.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
